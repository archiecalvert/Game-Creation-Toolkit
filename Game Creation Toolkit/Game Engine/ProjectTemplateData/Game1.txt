using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
namespace REPLACETHISNAMESPACE
{
    public class Game1 : Game
    {
        public static GraphicsDeviceManager _graphics;
        public static SpriteBatch _spriteBatch;
        public static Color BackgroundColour = Color.White;
        public static string ProjectDirectory;
        public Game1()
        {
            _graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
            IsMouseVisible = true;
        }
        protected override void Initialize()
        {
            //The project directory is set when the project is created
            ProjectDirectory = REPLACEPROJECTDIRECTORY;
            ObjectHandler.Initialise();
            //Changees the size of the window
            _graphics.PreferredBackBufferWidth = 1600;
            _graphics.PreferredBackBufferHeight = 1000;
            _graphics.ApplyChanges();
            base.Initialize();
        }
        protected override void LoadContent()
        {
            _spriteBatch = new SpriteBatch(GraphicsDevice);
        }
        protected override void Update(GameTime gameTime)
        {
            ObjectHandler.Update();
            base.Update(gameTime);
        }
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(BackgroundColour);
            _spriteBatch.Begin();
            ObjectHandler.Draw();
            _spriteBatch.End();
            base.Draw(gameTime);
        }
    }
    internal class ObjectHandler
    {
        public static List<Scene> SceneList;
        public static string CurrentScene;
        static bool ChangingScenes = false;
        public static void Initialise()
        {
            //Loads all of the scene data into the Scene List
            SceneList = new List<Scene>();
            foreach (string Scene in Directory.GetDirectories(Game1.ProjectDirectory + "\\GameData\\Scenes\\"))
            {
                string name = Scene.Substring(Game1.ProjectDirectory.Length + 17);
                SceneList.Add(new Scene(Scene.Substring(Game1.ProjectDirectory.Length + 17)));
            }
            foreach(string line in File.ReadLines(Game1.ProjectDirectory + "\\GameData\\Scenes\\scenes.dat"))
            {
                try
                {
                    //Extracts what the first scene inside of the users project will be
                    dynamic json = JsonConvert.DeserializeObject(line);
                    string MainScene = (string)json["MainScene"];
                    CurrentScene = MainScene;
                    return;
                } catch{}
            }
        }
        public static void Update()
        {
            //Calls the update procedure for each scene so that the game will be updated
            foreach (Scene scene in SceneList)
            {
                scene.Update();
            }
            if (Keyboard.GetState().IsKeyDown(Keys.N) && !ChangingScenes)
            {
                ChangingScenes = true;
                int position = 0;
                //Code below allows for the user to switch between their scenes
                foreach(Scene scene in SceneList)
                {
                    if(scene.sceneName == CurrentScene)
                    {
                        //Determines what the next scene to switch to will be
                        if (position+1 == SceneList.Count)
                        {
                            CurrentScene = SceneList.ElementAt(0).sceneName;
                        }
                        else
                        {
                            CurrentScene = SceneList.ElementAt(position+1).sceneName;
                        }
                        break;
                    }
                    position++;
                }
                
            }
            //Makes it so that the N key wont continuously change the scene
            if(Keyboard.GetState().IsKeyUp(Keys.N) && ChangingScenes)
            {
                ChangingScenes = false;
            }
        }
        public static void Draw()
        {
            //Draws each scene to the screen every frame
            foreach (Scene scene in SceneList)
            {
                scene.Draw();
            }
        }
        public static Script DetermineScriptType(string JSONObject, string ObjectName, string SceneName, Entity GameObject)
        {
            //This method will determine what kind of script each json object
            //This can then be used to store the game objects and scripts
            if (JSONObject.Contains("\"id\":\"Texture\""))
            {
                return new Texture(JSONObject, GameObject);
            }
            else if (JSONObject.Contains("\"id\":\"coordinate\""))
            {
                return new Coordinate(JSONObject, GameObject);
            }
            else if (JSONObject.Contains("\"id\":\"EntityMovement\""))
            {
                return new EntityMovement(JSONObject, GameObject);
            }
            return null;
        }
    }
    internal class Scene
    {
        public List<Entity> GameObjects;
        public string sceneName;
        public Scene(string SceneName)
        {
            sceneName = SceneName;
            GameObjects = new List<Entity>();
            //This loops through each game object in the scene and adds it to a list
            //These objects can then load and store the data when the users program launches
            foreach (string obj in Directory.GetDirectories(Game1.ProjectDirectory + "\\GameData\\Scenes\\" + SceneName + "\\"))
            {
                string ObjectName = obj.Substring(Game1.ProjectDirectory.Length + new string("\\GameData\\Scenes\\" + SceneName + "\\").Length);
                GameObjects.Add(new Entity(ObjectName, SceneName));
            }
        }
        public void Update()
        {
            if(sceneName != ObjectHandler.CurrentScene) return;
            //Updates each game object each frame
            foreach (Entity entity in GameObjects)
            {
                entity.Update();
            }
        }
        public void Draw()
        {
            if(sceneName != ObjectHandler.CurrentScene) return;
            //Draws each game object every frame
            foreach (Entity entity in GameObjects)
            {
                entity.Draw();
            }
        }
    }
    internal class Entity
    {
        public string ObjectName;
        public Vector2 Coordinates;
        public List<Script> Scripts;
        public Entity(string ObjectName, string SceneName)
        {
            this.ObjectName = ObjectName;
            Scripts = new List<Script>();
            //Adds all of the script data for the game object to a list
            foreach (string line in File.ReadAllLines(Game1.ProjectDirectory + "\\GameData\\Scenes\\" + SceneName + "\\" + ObjectName + "\\object.dat"))
            {
                Scripts.Add(ObjectHandler.DetermineScriptType(line, ObjectName, SceneName, this));
            }
        }
        public void Update()
        {
            //Updates every script in the game object every frame
            foreach (Script script in Scripts)
            {
                script.Update();
            }
        }
        public void Draw()
        {
            //Draws every script in the game object every frame
            foreach (Script script in Scripts)
            {
                script.Draw();
            }
        }

    }
    internal class Texture : Script
    {
        string TextureData;
        Texture2D texture;
        Entity ParentGameObject;
        Vector2 scale;
        public Texture(string ObjectData, Entity ParentGameObject)
        {
            TextureData = ObjectData;
            dynamic data = JsonConvert.DeserializeObject(ObjectData);
            int directoryLength = 0;
            string directory;
            scale = new((float)(Convert.ToDouble(data["scaleX"])), (float)(Convert.ToDouble(data["scaleY"])));
            //Extracts the texure directory from the json object data
            for (int i = 0; i < TextureData.Length; i++)
            {
                if (TextureData[28 + i] == '"')
                {
                    directoryLength = i;
                    directory = TextureData.Substring(28, directoryLength);
                    //Gets the image at that location and loads it into a texture
                    texture = Texture2D.FromFile(Game1._graphics.GraphicsDevice, directory);
                    break;
                }
            }
            //Stores the object that the script belongs to so its data can be accessed
            this.ParentGameObject = ParentGameObject;

        }
        public override void Update()
        {
        }
        public override void Draw()
        {
            //Draws the texture at the position of the game object
            Game1._spriteBatch.Draw(texture,
            position: new Vector2(1600 / 2, 1000 / 2) + new Vector2(ParentGameObject.Coordinates.X, -ParentGameObject.Coordinates.Y),
            sourceRectangle: null,
            color: Color.White,
            rotation: 0f,
            origin: new Vector2(texture.Width / 2, texture.Height / 2),
            scale: scale,
            effects: SpriteEffects.None,
            layerDepth: 1f);
        }
    }
    internal abstract class Script
    {
        //This class is a base class that will be inherited by every script
        public Script() { }
        public abstract void Update();
        public abstract void Draw();

    }
    internal class Coordinate : Script
    {

        public Coordinate(string ScriptData, Entity GameObject)
        {
            //Loads the data stored in the objects coordinate data
            dynamic obj = JsonConvert.DeserializeObject(ScriptData);
            float x = (float)Convert.ToDouble(obj["x"]);
            float y = (float)Convert.ToDouble(obj["y"]);
            GameObject.Coordinates = new Vector2(x, y);

        }
        public override void Update()
        {

        }
        public override void Draw()
        {
        }
    }
    internal class EntityMovement : Script
    {
        Entity Parent;
        Vector2 Velocity;
        float VelocityIncrement = 0.2f;
        float VelocityDropoff = 0.2f;
        float VelocityCap = 7f;
        float MinVelocity = 3f;
        public EntityMovement(string JSONData, Entity ParentEntity)
        {
            Parent = ParentEntity;
            dynamic obj = JsonConvert.DeserializeObject(JSONData);
            VelocityIncrement = obj["velocityIncrement"];
            VelocityDropoff = obj["velocityDropOff"];
            VelocityCap = obj["maximumVelocity"];
            MinVelocity = obj["lowestVelocity"];
        }
        public override void Update()
        {
            Vector2 direction = Vector2.Zero;
            if (isKeyDown(Keys.W))
            {
                direction.Y = 1;
            }
            if (isKeyDown(Keys.S))
            {
                direction.Y = -1;
            }
            //Makes the velocity positive and checks if its greater than the maximum velocity
            if (Math.Abs(Velocity.Y) > VelocityCap)
            {
                if (Velocity.Y > 0) Velocity.Y = VelocityCap;
                else Velocity.Y = -VelocityCap;
            }
            if (isKeyDown(Keys.A))
            {
                direction.X = -1;
            }
            if (isKeyDown(Keys.D))
            {
                direction.X = 1;
            }
            //Makes the velocity positive and checks if its greater than the maximum velocity
            if (Math.Abs(Velocity.X) > VelocityCap)
            {
                if (Velocity.X > 0) Velocity.X = VelocityCap;
                else Velocity.X = -VelocityCap;
            }
            //Checks to see if the movement keys arent being pressed
            if (!isKeyDown(Keys.W) && !isKeyDown(Keys.S))
            {
                if (Velocity.Y > 0)
                {
                    Velocity.Y -= VelocityDropoff;
                }
                else if (Velocity.Y < 0)
                {
                    Velocity.Y += VelocityDropoff;
                }
                //if in the range of the minimum velocity, it will make the velocity equal zero
                if (Math.Abs(Velocity.Y) < MinVelocity)
                {
                    Velocity.Y = 0;
                }
            }
            //Checks to see if the movement keys arent being pressed
            if (!isKeyDown(Keys.A) && !isKeyDown(Keys.D))
            {
                if (Velocity.X > 0)
                {
                    Velocity.X -= VelocityDropoff;
                }
                else if (Velocity.X < 0)
                {
                    Velocity.X += VelocityDropoff;
                }
                //if in the range of the minimum velocity, it will make the velocity equal zero
                if (Math.Abs(Velocity.X) < MinVelocity)
                {
                    Velocity.X = 0;
                }
            }
            //Responsible for making diagonal movement be the correct velocity
            direction.Normalize();
            if (!float.IsNaN(direction.Length()))
            {
                //If both of the direction coordinates are 0 then the normalised vector will be NaN.
                //This will cause the entity to dissapear as the coodinates wil also be equal to NaN.
                Velocity += direction * VelocityIncrement;
            }
            Parent.Coordinates += Velocity;
        }
        public override void Draw()
        {
            return;
        }
        bool isKeyDown(Keys key)
        {
            if (Keyboard.GetState().IsKeyDown(key))
            {
                return true;
            }
            return false;
        }
    }
}
